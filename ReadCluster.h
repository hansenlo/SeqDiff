#ifndef READCLUSTER_H
#define READCLUSTER_H

#include<sparsehash/sparse_hash_map>
#include<sparsehash/dense_hash_map>
//#include<bitset>
#include<fstream>
#include<string>
#include<stdlib.h>
#include<boost/dynamic_bitset.hpp>
//#include<algorithm>
//#include <boost/algorithm/string.hpp>
//#include<math.h>
#include<stdint.h>
//#include <stddef.h>
//#include<stdio.h>
//#include <iterator>
#include<sstream>
//#include<memory>
#include<ctime>
#include <omp.h>
#include <iostream>
#include<list>

#include "utilities.h"





class ReadCluster{
  
private:
  std::vector<std::string> readSeq; //array of reads that all have a set of unique kmers in common
  std::vector<uint_fast64_t> posWords; //The set of unique words on pos strand generated by a sequence variant
  std::vector<uint_fast64_t> negWords; //The set of unique words on neg strand generated by a sequence variant
  std::vector<int> startPositions;
  std::string contig; //assembled contig from the collection of reads in readSeq
  uint_fast64_t key2;
  bool mainKey;
  char strand;
  int distBetweenKeys;
  google::dense_hash_map<uint_fast64_t, int, customHash> refPositions; //hash table contains the positions of the unique words on the master read that defines the cluster


public:
  ReadCluster();
  void addSeq(std::string &);
  std::vector<std::string> getSeqs();
  std::string getContig();
  std::string mergeReads();
  void printReads();
  void setMainKey();
  void setKey2( uint_fast64_t );
  uint_fast64_t getKey2();
  bool getMainKey();
  void setStrand(char);
  char getStrand();
  void addPosWords(std::vector<uint_fast64_t> &);
  void addNegWords(std::vector<uint_fast64_t> &);
  std::vector<uint_fast64_t>::iterator endPosWords(){return posWords.end();};
  std::vector<uint_fast64_t>::iterator endNegWords(){return negWords.end();};
  std::vector<uint_fast64_t>::iterator beginPosWords(){return posWords.begin();};
  std::vector<uint_fast64_t>::iterator beginNegWords(){return negWords.begin();};
  google::dense_hash_map<uint_fast64_t, int, customHash> getPositions(){ return refPositions;}; 
  std::vector<uint_fast64_t> getNegWords(){return negWords;};
  std::vector<uint_fast64_t> getPosWords(){return posWords;};



  void setRefPositions(google::dense_hash_map<uint_fast64_t, int, customHash> newPositions){refPositions=newPositions;};
  
  void addStart(int newStart){startPositions.push_back(newStart);};

  std::string mergeReads(int kmerSize, int cutoffMinNuc);
  int getNumReads();
  void setDistBetweenKeys(int newDist){ distBetweenKeys=newDist; }
  int getDistBetweenKeys(){return distBetweenKeys; }
  bool allReadyPresent(std::string &); //method to compare read to add and return if read is already present  

};

#endif
